#!/usr/bin/env bash
set -e

export_env_dir() {
	local env_dir=$1
	local whitelist_regex=${2:-''}
	local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|IFS)$'}
	if [ -d "$env_dir" ]; then
		for e in $(ls $env_dir); do
			echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
			export "$e=$(cat $env_dir/$e)"
			:
		done
	fi
}

env_dir=${3:-}
export_env_dir "$env_dir"

echo "--------> Checking for environment variables"
echo "CREDENTIALS_ENVIRONMENT: ${CREDENTIALS_ENVIRONMENT:-not set}"
echo "CREDENTIALS_VAULT: ${CREDENTIALS_VAULT:-not set}"
echo "CREDENTIALS_ITEM: ${CREDENTIALS_ITEM:-not set}"

if [[ -z "$CREDENTIALS_ENVIRONMENT" ]]; then
  echo "ERROR: CREDENTIALS_ENVIRONMENT is not set."
  exit 1
fi
if [[ -z "$CREDENTIALS_VAULT" ]]; then
  echo "ERROR: CREDENTIALS_VAULT is not set."
  exit 1
fi
if [[ -z "$CREDENTIALS_ITEM" ]]; then
  echo "ERROR: CREDENTIALS_ITEM is not set."
  exit 1
fi
if [[ -z "$OP_SERVICE_ACCOUNT_TOKEN" ]]; then
  echo "ERROR: OP_SERVICE_ACCOUNT_TOKEN is not set."
  exit 1
fi

BUILD_DIR=$1
cd $BUILD_DIR

CREDENTIALS_DIR="config/credentials"
mkdir -p $CREDENTIALS_DIR

echo "--------> Injecting encrypted credentials..."
/app/vendor/1password/bin/op document get --force --out-file $CREDENTIALS_DIR/$CREDENTIALS_ENVIRONMENT.yml.enc --vault $CREDENTIALS_VAULT $CREDENTIALS_ITEM

echo "--------> Injecting rails master key..."
/app/vendor/1password/bin/op read --force --out-file $CREDENTIALS_DIR/$CREDENTIALS_ENVIRONMENT.key op://$CREDENTIALS_VAULT/$CREDENTIALS_ITEM/RAILS_MASTER_KEY